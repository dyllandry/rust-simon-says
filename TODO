create better text & component system
✔ move text component into own file @done(22-03-31 21:21)
✔ move text system into own file @done(22-03-31 21:21)
✔ position text via minimal position component @done(22-04-02 20:47)
✔ center align text @done(22-04-05 17:21)
✔ set text width @done(22-04-05 20:04)
✔ anchor text to middle of screen @done(22-04-06 16:31)
text
    ☐ add text color
    ☐ outline area of text
input
    I liked the architecture in the following article. I followed it a bit.
    https://www.gamedev.net/blogs/entry/2250186-designing-a-robust-input-handling-system-for-games/
    In summary...
        Input System: Maps raw input from OS to input relevant to games. Like parsing key input to specificaly keydown, keyup, and keypress.
        Struct of valid inputs: Created by the input system, contains validated game relevant inputs.
        Context: Receive the struct of valid inputs and decides what to do with them given the current "context" of the game, like if a menu is open or if the character is fighting something. 
    ✔ create input system that receives input every frame @done(22-04-08 18:58)
    ✔ add action to struct of valid mapped input @done(22-04-12 17:32)
    ✔ create context trait and sample context structure @done(22-04-12 21:08)
scripting
    How does that component do things to other components? Can I just pass it the world
    instance? Can the player component keep a reference to the other components it needs
    to work on?
        https://gamedev.stackexchange.com/questions/169354/how-can-i-handle-scripting-like-tasks-in-my-ecs

    Or is this something that doesn't necessarily need to work on the component system?
    Can I just script alongside the components?
        https://gamedev.stackexchange.com/questions/173974/user-friendly-scripting-when-using-an-ecs
questions to try out
    can a component contain a reference?
other
    ☐ nest transforms
